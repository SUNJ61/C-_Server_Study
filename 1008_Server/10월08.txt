====================================================================================
오늘 할 것

#1. TCP를 이용하여 서버구축

[TCP/UDP]

-OSI 5계층 : 다음과 같은 경로로 데이터가 전송된다. 
 어플리케이션 = 상품
 트랜스포트 = 배송정책
 네트워크 = 도착 주소
 데이터 링크 = 단지경로
 피지컬 = 택배 운송

 -데이터가 준비되면 다음과 같은 경로로 데이터가 이동한다.
  데이터 송신 :  라우터 > 스위치 > 각 컴퓨터 (개인 사용자)
  데이터 수신 : 각 컴퓨터 > 스위치 > 라우터

 -TCP : 안전한 트럭으로 데이터를 전송하는 것과 같다(혹은 전화연결?) > 연결 방식
          연결형 서비스 > 연결을 위한 논리적인 경로가 있어 전송순서가 보장된다.
                               즉, 신뢰성이 좋지만, 속도가 느리다. UDP보다 속도가 느리지만 절망적으로 느리지는 않다.
           데이터 분실이 일어나면 책임지고 다시 전송, 물건을 주고 받을 상황이 아니면 일부만 보낸다(흐름, 혼잡제어). 
           (유니티에서 Rearised delta)

 -UDP : 위험한 총알 배송과 같다. (데이터가 중간에 손상, 오배송이 될 수 있음.) > 비연결 방식
           비연결형 서비스 > 연결이라는 개념이 없고 전송순서가 보장되지 않음.
                                   즉, 신뢰성이 나쁘고 속도가 빠르다.
           데이터 분실에 책임이 없고 데이터를 보내고 생각한다. TCP보다 속도가 빠르다.
	(유니티에서 unRearised)

[ThreadLocal]
 -ThreadLoacl : 각 스레드마다 독립적인 값을 저장하는데 사용되는 메커니즘.
                    즉, 여러 스레드가 동시에 실행 될 때 각 스레드는 자신만의 고유한 값을 가질 수 있게 해준다.

                   >스레드 안정성 보장 : 여러 스레드가 공유하는 변수에 대한 동기화 문제 해결
                   >스레드별 데이터 관리 : 각 스레드는 자신만의 값을 가지므로 다른 스레드의 영향을 받지 않고
                                                  독립적으로 작업  
                   >전역 변수의 스레드별 분리 : 전역 변수를 스레드별로 분리하여 사용가능.
====================================================================================

#1. TCP를 이용하여 서버 구축

 -TCP를 이용하는 데이터를 받고 보내는 buffer를 구축한다.